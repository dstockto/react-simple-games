{"version":3,"sources":["Components/Games/Nonogram/img/nonogram.png","Components/Games/Sudoku/img/sudoku.png","Components/SettingsIcon.jsx","Components/Navigation.jsx","Models/User.js","Context/UserContext.js","Components/ErrorBoundary.jsx","Components/Header.jsx","Components/Games/TicTacToe/Components/Square.jsx","Components/Games/TicTacToe/Components/Board.jsx","Components/Games/TicTacToe/Models/TicTacToeModel.js","Components/Games/TicTacToe/Models/TicTacToeHistory.js","Components/Games/TicTacToe/Services/WinnerModel.js","Components/Games/TicTacToe/Services/calculateWinner.js","Components/Games/TicTacToe/TicTacToeGame.jsx","Components/Games/Nonogram/NonogramGame.jsx","Components/Games/Sudoku/SudokuGame.jsx","Components/Games/EliMath/EliMathGame.jsx","Components/Settings.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SettingsIcon","props","isSettings","route","location","pathname","link","classes","push","react_default","a","createElement","className","join","react_router_dom","to","role","aria-label","Navigation","User","name","arguments","length","undefined","Object","classCallCheck","this","_name","Context","createContext","Provider","children","_useState","useState","_useState2","slicedToArray","user","setUser","usersContext","changeUser","value","Consumer","ErrorBoundary","_this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","style","color","React","Component","Header","useContext","UserContext","title","history","match","Components_ErrorBoundary","SettingsIcon_SettingsIcon","Square","_ref","onClick","winner","position","classNames","gridArea","Board","squares","clickHandler","squareComponents","map","x","i","isWinner","hasSquare","key","renderSquare","Fragment","TicTacToeModel","Array","fill","_squares","newSquares","slice","TicTacToeHistory","_history","boardState","concat","boardNum","lastBoard","Error","step","WinnerModel","positions","_winner","_positions","Set","has","from","entries","calculateWinner","reduce","_ref2","b","c","oldPositions","emptyHistory","TicTacToeGame","setHistory","_useState3","_useState4","xIsNext","setXIsNext","_useState5","_useState6","stepNumber","setStepNumber","boardModel","getBoard","status","moves","move","desc","historySlice","getSlice","currentBoard","latest","isMarked","newBoard","setSquare","addMove","NonogramGame","src","nonogram","alt","height","backgroundColor","SudokuGame","sudoku","EliMathGame","Settings","_useContext","type","onChange","event","userName","target","withNewName","App","UserContext_Provider","react_router","path","component","Boolean","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3dd32c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nonogram.0d01e696.png\";","module.exports = __webpack_public_path__ + \"static/media/sudoku.aba201d7.png\";","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./SettingsIcon.css\";\n\nexport default function SettingsIcon(props) {\n  const {route} = props;\n\n  const isSettings = route.location.pathname === '/settings';\n\n  // This makes settings be a toggle - if you're on settings, it links back to\n  // the root. If you're anywhere else, it goes to /settings\n  const link = isSettings ? '/' : '/settings';\n\n  let classes = ['settings'];\n  if (isSettings) {\n    classes.push('rotate');\n  }\n\n  return (\n    <section className={classes.join(' ')}>\n      <Link to={link}>\n        <span role={'img'} aria-label={'Settings'}>⚙</span>️\n      </Link>\n    </section>\n  );\n};\n","import React from \"react\";\nimport {NavLink} from 'react-router-dom';\nimport \"./navigation.css\";\n\nexport default function Navigation() {\n  return (\n    <nav>\n      <NavLink to={'/eli-math'}>Eli's Math Game</NavLink>\n      <NavLink to={'/tic-tac-toe'}>Tic-Tac-Toe</NavLink>\n      <NavLink to={'/nonogram'}>Nonogram</NavLink>\n      <NavLink to={'sudoku'}>Sudoku</NavLink>\n    </nav>\n  );\n};\n","export default class User {\n  /**\n   * Creates a User model\n   * @param {string} name\n   */\n  constructor(name = 'Anonymous') {\n    this._name = name;\n  }\n\n  /**\n   * Returns the user's name\n   * @returns {string}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Returns a new User model with a new name\n   *\n   * @param {string} name\n   * @returns {User}\n   */\n  static withNewName(name) {\n    return new User(name);\n  }\n}\n","import React, { createContext, useState } from \"react\";\nimport User from '../Models/User';\n\nexport const Context = createContext();\n\nexport const Provider = props => {\n  // Initial values are obtained from the props\n  const {\n    children,\n  } = props;\n\n  // Use State to keep the values\n  const [user, setUser] = useState(new User());\n\n  const changeUser = user => setUser(user);\n\n  // Make the context object:\n  const usersContext = {\n    user,\n    changeUser,\n    children,\n  };\n\n  // pass the value in provider and return\n  return <Context.Provider value={usersContext}>{children}</Context.Provider>;\n};\n\nexport const { Consumer } = Context;\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <p style={{color: 'red'}}>Something went wrong.</p>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, {useContext} from \"react\";\nimport SettingsIcon from './SettingsIcon';\nimport Navigation from './Navigation';\nimport \"./header.css\";\nimport {UserContext} from '../Context';\nimport ErrorBoundary from './ErrorBoundary';\n\nexport default function Header(props) {\n\n  const {user} = useContext(UserContext);\n\n  const {title, history, location, match} = props;\n  return (\n    <section className={'header'}>\n      <span className=\"title\">{title || 'Simple Game Platform'}</span>\n      <Navigation/>\n      <ErrorBoundary>\n        <span className={'greeting'}>Hello, {user.name}</span>\n      </ErrorBoundary>\n      <SettingsIcon route={{history, location, match}}/>\n    </section>\n  );\n};\n","import React from 'react';\n\nexport default function Square({value, onClick, winner, position}) {\n  let classNames = ['square'];\n  if (winner) {\n    classNames.push('winner');\n  }\n\n  return (\n    <button\n      style={{gridArea: position}}\n      className={classNames.join(' ')}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n}\n","import React from 'react';\nimport Square from './Square';\n\nexport default function Board({squares, clickHandler, winner}) {\n  /**\n   * Creates the Square component given its position. Uses the provided\n   * clickHandler and WinnerModel to determine behavior of the Square\n   * when it is clicked as well as how it should render based on the\n   * contents and if it is part of the winning selection\n   *\n   * @param {number} i Position of square\n   * @returns {Square}\n   */\n  function renderSquare(i) {\n    let isWinner = false;\n    if (winner && winner.hasSquare(i)) {\n      isWinner = true;\n    }\n\n    return (\n      <Square\n        key={i}\n        value={squares[i]}\n        onClick={() => clickHandler(i)}\n        winner={isWinner}\n        position={'a' + i}\n      />\n    );\n  }\n\n  const squareComponents = squares.map((x, i) => {\n    return renderSquare(i);\n  });\n\n  return (\n    <>\n      {squareComponents}\n    </>\n  );\n}\n","class TicTacToeModel {\n  /**\n   * Create a new TicTacToeModel object. This can be done by providing\n   * squares, or if not provided, squares will be set automatically as\n   * an array of size 9 containing null values. Expected non-null values\n   * for squares would be an array of size 9 containing either 'X', or\n   * 'O' or null in each position.\n   *\n   * @param {[string|null]} squares\n   */\n  constructor(squares = null) {\n    if (squares === null) {\n      squares = Array(9).fill(null);\n    }\n    this._squares = squares;\n  }\n\n  setSquare(i, value) {\n    const newSquares = this.squares.slice();\n    newSquares[i] = value;\n    return new TicTacToeModel(newSquares);\n  }\n\n  isMarked(i) {\n    return this.squares[i] !== null;\n  }\n\n  get squares() {\n    return this._squares;\n  }\n}\n\nexport default TicTacToeModel;\n","import TicTacToeModel from './TicTacToeModel';\n\nclass TicTacToeHistory {\n  /**\n   * Returns the array of all TicTacToeModel in history\n   * @returns {[TicTacToeModel]}\n   */\n  get history() {\n    return this._history;\n  }\n\n  /**\n   * Creates a new TicTacToeHistory object with the given set of history.\n   * The history parameter is an array of TicTacToeModel or null. If it's\n   * null, the default starting board will be provided in history automatically.\n   *\n   * @param {[TicTacToeModel]} history\n   */\n  constructor(history = null) {\n    if (history === null) {\n      history = [new TicTacToeModel()];\n    }\n    this._history = history;\n  }\n\n  /**\n   * Adds a new TicTacToeModel to the history of the game\n   *\n   * @param boardState\n   * @returns {TicTacToeHistory}\n   */\n  addMove(boardState) {\n    const newHistory = this.history.concat(boardState);\n    return new TicTacToeHistory(newHistory);\n  }\n\n  /**\n   * Returns the latest TicTacToeModel from history\n   * @returns {TicTacToeModel}\n   */\n  get latest() {\n    return this.history[this.lastBoard];\n  }\n\n  /**\n   * Retrieves the number of the latest board in history\n   * @returns {number}\n   */\n  get lastBoard() {\n    return this.history.length - 1;\n  }\n\n  /**\n   * Returns a board by its number in history. If that board number does\n   * not exist, it will throw an Error\n   * @param {number} boardNum\n   * @returns {TicTacToeModel}\n   * @throws Error\n   */\n  getBoard(boardNum) {\n    if (boardNum > this.lastBoard) {\n      throw new Error(\"Invalid board number\");\n    }\n    return this.history[boardNum];\n  }\n\n  /**\n   * Return a new TicTacToeHistory object but with the history limited up\n   * to a certain step number\n   * @param {number} step\n   * @returns {TicTacToeHistory}\n   */\n  getSlice(step) {\n    return new TicTacToeHistory(this.history.slice(0, step + 1));\n  }\n}\n\nexport default TicTacToeHistory;\n","export default class WinnerModel {\n  /**\n   * The winning player of the game\n   * @returns {string}\n   */\n  get winner() {\n    return this._winner;\n  }\n\n  /**\n   * Determines if the given square is part of the winning combination\n   * specified by this WinnerModel. It will return true if it is.\n   * @param {number} i\n   * @returns {boolean}\n   */\n  hasSquare(i) {\n    return (this._positions.has(i));\n  }\n\n  get positions() {\n    return Array.from(this._positions.entries(), x => x[0]);\n  }\n\n  /**\n   * Builds a model representing a winning combination for Tic-Tac-Toe.\n   * Winner is the symbol of the winner (X or O) and positions are all\n   * the board square numbers that cause the win\n   *\n   * @param {string} winner\n   * @param {[number]} positions\n   */\n  constructor(winner, positions) {\n    this._winner = winner;\n    this._positions = new Set(positions);\n  }\n};\n","import WinnerModel from './WinnerModel';\n\n/**\n * Given an array of size 9 representing a TicTacToe game, this function\n * will determine if a player has won. This means the same player, either\n * 'X' or 'O' has connected 3 of their symbols either vertically, horizontally\n * or diagonally.\n *\n * @param {[string|null]} squares\n * @returns {WinnerModel|null}\n */\nexport default function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2,],\n    [3, 4, 5,],\n    [6, 7, 8,],\n    [0, 3, 6,],\n    [1, 4, 7,],\n    [2, 5, 8,],\n    [0, 4, 8,],\n    [2, 4, 6,],\n  ];\n\n  return lines.reduce((winner, [a, b, c]) => {\n    if (squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n      if (winner === null) {\n        // First winner\n        return new WinnerModel(squares[a], [a, b, c]);\n      }\n      const oldPositions = winner.positions;\n      return new WinnerModel(winner.winner, oldPositions.concat(a, b, c));\n    }\n    return winner;\n  }, null);\n};\n","import React, {useState} from \"react\";\nimport './TicTacToeGame.css';\nimport Board from './Components/Board';\nimport TicTacToeHistory from './Models/TicTacToeHistory';\nimport calculateWinner from './Services/calculateWinner';\n\nconst emptyHistory = new TicTacToeHistory();\n\nexport default function TicTacToeGame() {\n\n  const [history, setHistory] = useState(emptyHistory);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [stepNumber, setStepNumber] = useState(0);\n  const boardModel = history.getBoard(stepNumber);\n\n  function clickHandler(i) {\n    const historySlice = history.getSlice(stepNumber);\n    const currentBoard = historySlice.latest;\n    if (calculateWinner(currentBoard.squares) || currentBoard.isMarked(i)) {\n      return;\n    }\n\n    const newBoard = currentBoard.setSquare(i, xIsNext ? 'X' : 'O');\n    setHistory(historySlice.addMove(newBoard));\n    setXIsNext(!xIsNext);\n    setStepNumber(historySlice.lastBoard + 1);\n  }\n\n  function jumpTo(step) {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  }\n\n  const winner = calculateWinner(boardModel.squares);\n\n  let status = 'Next Player: ' + (xIsNext ? 'X' : 'O');\n  if (winner) {\n    status = 'Winner: ' + winner.winner;\n  }\n\n  const moves = history.history.map((step, move) => {\n    const desc = move ? 'Go to move ' + move : 'Go to game start';\n    let className = '';\n    if (move === stepNumber) {\n      className = 'current';\n    }\n    return (\n      <li key={'history' + move}>\n        <button onClick={() => jumpTo(move)} className={className}>{desc}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <Board squares={boardModel.squares} clickHandler={clickHandler} winner={winner}/>\n      <div className=\"status\">{status}</div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n\n\n","import React from \"react\";\nimport nonogram from './img/nonogram.png';\n\nexport default function NonogramGame() {\n  return (\n    <div>\n      <img src={nonogram} alt={\"nonogram\"} height={'250px'} style={{backgroundColor: 'white'}}/>\n      Nonogram Coming Soon!\n    </div>\n  );\n};\n","import React from \"react\";\nimport sudoku from \"./img/sudoku.png\";\n\nexport default function SudokuGame() {\n  return (\n    <div>\n      <img src={sudoku} alt={\"sudoku\"} height={'250px'} />\n           Sudoku Coming Soon!\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default function EliMathGame() {\n  return (\n    <div>Eli's Math Game coming soon!</div>\n  );\n};\n","import React, {useContext} from \"react\";\nimport {UserContext} from '../Context';\nimport ErrorBoundary from './ErrorBoundary';\nimport User from '../Models/User';\n\nexport default function Settings() {\n  const {user, changeUser} = useContext(UserContext);\n\n  function onChange(event) {\n    const userName = event.target.value;\n    changeUser(User.withNewName(userName));\n  }\n\n  return (\n    <section className={'content'}>\n      <label>\n        Who are you?\n        <ErrorBoundary>\n          <input type={'text'} value={user.name} onChange={onChange}/>\n        </ErrorBoundary>\n      </label>\n    </section>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport TicTacToeGame from './Components/Games/TicTacToe/TicTacToeGame';\nimport NonogramGame from './Components/Games/Nonogram/NonogramGame';\nimport SudokuGame from './Components/Games/Sudoku/SudokuGame';\nimport EliMathGame from './Components/Games/EliMath/EliMathGame';\nimport Settings from './Components/Settings';\nimport {UserProvider} from './Context';\n\nfunction App() {\n\n  return (\n    <UserProvider>\n      <Router>\n        <div className=\"App\">\n          <Route path={'/'} component={Header}/>\n          <section className={'content'}>\n            <Route path={'/eli-math'} component={EliMathGame}/>\n            <Route path={'/tic-tac-toe'} component={TicTacToeGame}/>\n            <Route path={'/nonogram'} component={NonogramGame}/>\n            <Route path={'/sudoku'} component={SudokuGame}/>\n            <Route path={'/settings'} component={Settings}/>\n          </section>\n        </div>\n      </Router>\n    </UserProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}